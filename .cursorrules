# REGLAS DE CURSOR PARA SISTEMA WBS INTERACTIVO
# Proyecto: APP La Dorada-Chiriguan√°
# Versi√≥n: 2.1 | Fecha: 15 de Octubre de 2025
# NUEVO: Ejecuci√≥n Modular de DTs (subsistema por subsistema)

## üéØ CONTEXTO DEL PROYECTO

Este es un proyecto de ingenier√≠a EPC (Engineering, Procurement, Construction) para una concesi√≥n ferroviaria.
El sistema WBS Interactivo permite a especialistas proponer cambios t√©cnicos que se documentan como Decisiones T√©cnicas (DT)
y se ejecutan autom√°ticamente mediante Cursor siguiendo instrucciones YAML embebidas.

**IMPORTANTE:** Las DTs deben propagar cambios en **6 NIVELES** de documentaci√≥n para mantener coherencia t√©cnica completa.

---

## üîÑ FLUJO DE PROPAGACI√ìN (6 NIVELES)

### **NIVEL 1: IX. WBS Y PLANIFICACI√ìN** ‚úÖ OBLIGATORIO
```
‚îú‚îÄ WBS_Presupuestal_v2.0.md (cantidades, VU, totales)
‚îú‚îÄ datos_wbs_TODOS_items.json (datos completos)
‚îú‚îÄ wbs_metadata_enriquecida.json (metadata t√©cnica)
‚îî‚îÄ Interfaces HTML (visualizaci√≥n)
```

### **NIVEL 2: V. INGENIER√çA DE DETALLE** ‚ö†Ô∏è CONDICIONAL
```
‚îî‚îÄ V.X_Sistema_Detalle_vX.md (secci√≥n t√©cnica espec√≠fica)
    Ejemplo: DT-CTC-002 ‚Üí V.2 CTC ¬ß3.2 "Arquitectura"
    
    Script autom√°tico: scripts/actualizar_documentos_detalle.ps1
    - Busca archivos V.X mencionados en DTs
    - Versiona autom√°ticamente (v5.0 ‚Üí v5.1)
    - Agrega historial de actualizaciones con ID de DT
    - Trazabilidad completa DT ‚Üí V.X
```

### **NIVEL 3: III. INGENIER√çA CONCEPTUAL** ‚ö†Ô∏è SI APLICA
```
‚îî‚îÄ Documentos Integrados (criterios/cantidades)
    Ejemplo: 26_Sistema_CTC_Integrado.md
```

### **NIVEL 4: VIII. DOCUMENTOS MAESTROS** ‚úÖ OBLIGATORIO
```
‚îú‚îÄ CRITERIOS_TECNICOS_MAESTRO_v1.0.md (agrega criterio)
‚îú‚îÄ MATRIZ_TRAZABILIDAD_TECNICA_v1.0.md (enlaza DT ‚Üí Docs)
‚îú‚îÄ MATRIZ_DEPENDENCIAS_DOCUMENTALES_v1.0.md (agrega fila)
‚îî‚îÄ MATRIZ_RIESGOS_PMO_AMPLIADA_v1.0.md (si aplica riesgo)

Script autom√°tico: scripts/actualizar_documentos_maestros.ps1
- Extrae metadata de DTs (Sistema, Item WBS, Tipo cambio)
- Inserta filas en MATRIZ_DEPENDENCIAS_DOCUMENTALES
- Agrega entradas a MATRIZ_TRAZABILIDAD_TECNICA
- Verifica duplicados antes de insertar
- 18 DTs ya registradas en matrices
```

### **NIVEL 5: X. ENTREGABLES CONSOLIDADOS** ‚ö†Ô∏è SI EXISTE
```
‚îî‚îÄ SISTEMA_XX_Master.md (actualiza si ya consolidado)
```

### **NIVEL 6: √çNDICES** ‚úÖ OBLIGATORIO
```
‚îî‚îÄ Indice_Maestro_Consolidado_v1.0.md (referencias cruzadas)
```

**NOTA:** Niveles ‚úÖ OBLIGATORIOS siempre se actualizan. Niveles ‚ö†Ô∏è CONDICIONALES solo si aplica seg√∫n MATRIZ_DEPENDENCIAS.

---

## üìã EJECUCI√ìN DE DECISIONES T√âCNICAS (DT)

### DETECCI√ìN AUTOM√ÅTICA

Cuando el usuario abre o menciona un archivo `DT-*.md` ubicado en `II. Apendices Tecnicos/Decisiones_Tecnicas/`:

1. **Reconocer como Decisi√≥n T√©cnica**
   - Archivos con patr√≥n: `DT-[SISTEMA]-[NUMERO]-[FECHA].md`
   - Ejemplos: `DT-FIBRA-042-2025-10-07.md`, `DT-TETRA-015-2025-10-08.md`

2. **Buscar secci√≥n de instrucciones**
   - Secci√≥n: `## 10. INSTRUCCIONES PARA CURSOR ‚öôÔ∏è`
   - Contiene bloque YAML entre ` ```yaml ` y ` ``` `

3. **Ofrecer ejecuci√≥n**
   - Preguntar al usuario: "He detectado una Decisi√≥n T√©cnica. ¬øQuieres que la ejecute?"
   - Si usuario dice "S√≠", "Ejecuta", "Procede" o similar ‚Üí Iniciar ejecuci√≥n

---

### PROCESO DE EJECUCI√ìN

#### **PASO 1: LEER Y PARSEAR YAML**

```markdown
1. Extraer el bloque YAML de la secci√≥n 10
2. Parsear estructura completa
3. Identificar:
   - dt_metadata (metadatos)
   - archivos_actualizar (lista de archivos y cambios)
   - items_dependientes (si aplica)
   - validaciones (checks pre-ejecuci√≥n)
   - manejo_errores (estrategias)
```

#### **PASO 2: VALIDACIONES PRE-EJECUCI√ìN**

Seg√∫n el campo `validaciones` en YAML:

```yaml
validaciones:
  - verificar_archivos_existen: true
  - backup_antes_modificar: true
  - validar_formato_numeros: true
  - confirmar_con_usuario: true
```

**Ejecutar validaciones:**
- ‚úÖ `verificar_archivos_existen`: Confirmar que todos los archivos en `archivos_actualizar` existen
- ‚úÖ `backup_antes_modificar`: Crear backup mental de contenido original (para poder revertir)
- ‚úÖ `validar_formato_numeros`: Verificar que n√∫meros son parseables
- ‚úÖ `confirmar_con_usuario`: Mostrar resumen y pedir confirmaci√≥n

#### **PASO 3: MOSTRAR RESUMEN Y CONFIRMAR**

Mostrar al usuario:

```
üìã DECISI√ìN T√âCNICA: [DT-ID]
√çtem WBS: [codigo]
Tipo de cambio: [tipo]

Archivos a actualizar ([N]):
‚úì [archivo1] ‚Üí [acci√≥n]
‚úì [archivo2] ‚Üí [acci√≥n]
‚úì ...

√çtems dependientes a recalcular ([N]):
- [item1]
- [item2]

Validaciones:
‚úì Todos los archivos existen
‚úì Backup creado
‚úì Formato de n√∫meros validado

¬øEjecutar cambios? (S√≠/No)
```

Si usuario dice "S√≠" ‚Üí Continuar al Paso 4
Si usuario dice "No" ‚Üí Cancelar y reportar

#### **PASO 4: EJECUTAR CAMBIOS**

Para cada elemento en `archivos_actualizar`:

```yaml
- file: "ruta/archivo.md"
  accion: "actualizar_y_versionar"
  seccion: "Item 1.1.3"
  cambios:
    - campo: "cantidad"
      buscar: "2068"
      reemplazar: "1697"
```

**Proceso por archivo:**

1. **Abrir archivo** (usar herramienta `read_file`)

2. **Buscar secci√≥n** especificada en `seccion`
   - Si no se encuentra ‚Üí Seguir estrategia en `manejo_errores.seccion_no_encontrada`

3. **Aplicar cambios** seg√∫n array `cambios`:
   - Para cada cambio:
     - Buscar valor en `buscar`
     - Reemplazar con valor en `reemplazar`
     - Si `validar_contexto: true` ‚Üí Verificar que sea el contexto correcto antes de reemplazar

4. **Versionamiento** (si aplica):
   ```yaml
   versionamiento:
     version_actual: "v3.0"
     version_nueva: "v3.1"
     razon: "DT-FIBRA-042 - cantidad"
     agregar_nota: "Origen: DT-FIBRA-042 | Fecha: 2025-10-07"
   ```
   - Actualizar versi√≥n en header del archivo
   - Agregar nota de origen al final o en secci√≥n de cambios

5. **Guardar archivo** (usar herramienta `search_replace` o `write`)

6. **Notificar progreso**:
   ```
   ‚úì [archivo] actualizado ([N] cambios aplicados)
   ```

#### **PASO 5: RECALCULAR √çTEMS DEPENDIENTES**

Si `items_dependientes.recalcular: true`:

```yaml
items_dependientes:
  recalcular: true
  items:
    - "1.1.5"
    - "1.1.10"
  formula_base: "proporcional_a_item_principal"
```

**Para cada √≠tem dependiente:**
1. Identificar en WBS
2. Aplicar f√≥rmula seg√∫n `formula_base`
   - `proporcional_a_item_principal`: Ajustar proporcionalmente al cambio del √≠tem principal
   - `fixed_percentage`: Usar porcentaje fijo
3. Actualizar valores en archivo WBS
4. Reportar cambios

#### **PASO 6: ACTUALIZAR MATRIZ DE DEPENDENCIAS**

Si hay entrada para actualizar `MATRIZ_DEPENDENCIAS_DOCUMENTALES`:

```yaml
- file: "VIII.../MATRIZ_DEPENDENCIAS_DOCUMENTALES_v1.0.md"
  accion: "agregar_fila"
  nueva_fila:
    sistema: "fibra"
    decision_tecnica: "DT-FIBRA-042"
    archivos_afectados: "WBS_Presupuestal, 2 archivos"
    tipo_impacto: "Cantidades"
```

**Proceso:**
1. Abrir archivo de matriz
2. Buscar tabla principal
3. Agregar nueva fila con formato Markdown:
   ```markdown
   | fibra | DT-FIBRA-042 | WBS_Presupuestal, 2 archivos | Cantidades |
   ```
4. Guardar archivo

#### **PASO 7: ACTUALIZAR DT CON LOG DE EJECUCI√ìN**

En el archivo DT original:

1. **Marcar checkbox de "Ejecutado"** en secci√≥n 11:
   ```markdown
   - [x] üîß Ejecutado por Cursor: [fecha-hora]
   ```

2. **Completar secci√≥n 12 "LOG DE EJECUCI√ìN"**:
   ```markdown
   ## 12. LOG DE EJECUCI√ìN

   ```
   Fecha ejecuci√≥n: 2025-10-07 15:45:30
   Usuario Cursor: [tu nombre]
   Archivos modificados: 3 (WBS_Presupuestal_v3.1.md, V.3_Comunicacion.md, MATRIZ_DEPENDENCIAS.md)
   √çtems recalculados: 2 (1.1.5, 1.1.10)
   Errores encontrados: 0
   Tiempo ejecuci√≥n: 12 segundos
   ```
   ```

#### **PASO 8: REPORTE FINAL**

Mostrar al usuario:

```
‚úÖ DT-[ID] EJECUTADA EXITOSAMENTE

üìä RESUMEN:
- Archivos actualizados: [N]
  ‚úì WBS_Presupuestal v3.0 ‚Üí v3.1 (2 cambios)
  ‚úì V.3_Sistemas_Comunicacion_Detalle.md (1 cambio)
  ‚úì MATRIZ_DEPENDENCIAS_DOCUMENTALES (nueva fila)

- √çtems dependientes recalculados: [N]
  ‚úì 1.1.5 - Uniones r√°pidas
  ‚úì 1.1.10 - Insumos fusionado

- Matrices actualizadas:
  ‚úì MATRIZ_DEPENDENCIAS_DOCUMENTALES

- Log completado en: DT-[ID].md (Secci√≥n 12)

üéâ Todos los cambios aplicados correctamente.
```

---

### MANEJO DE ERRORES

Seg√∫n el campo `manejo_errores` en YAML:

```yaml
manejo_errores:
  - archivo_no_existe: "reportar_y_continuar"
  - seccion_no_encontrada: "pedir_confirmacion_manual"
  - validacion_falla: "detener_y_reportar"
  - backup_falla: "detener_ejecucion"
```

**Estrategias:**

1. **`reportar_y_continuar`**
   - Reportar error al usuario
   - Continuar con siguiente archivo
   - Ejemplo: "‚ö†Ô∏è Archivo X no encontrado. Continuando con siguiente..."

2. **`pedir_confirmacion_manual`**
   - Reportar situaci√≥n al usuario
   - Pedir confirmaci√≥n antes de continuar
   - Ejemplo: "‚ö†Ô∏è Secci√≥n Y no encontrada en archivo X. ¬øBuscar manualmente? (S√≠/No)"

3. **`detener_y_reportar`**
   - Detener ejecuci√≥n inmediatamente
   - Reportar error detallado
   - No aplicar m√°s cambios
   - Ejemplo: "‚ùå Validaci√≥n fall√≥: [raz√≥n]. Ejecuci√≥n detenida. No se aplicaron cambios."

4. **`detener_ejecucion`**
   - Detener sin preguntar
   - Revertir cambios si es posible
   - Reportar estado

---

## üîç COMANDOS ESPECIALES

### Cuando usuario escribe:

- **"Ejecuta DT-[ID]"** o **"Ejecuta esta DT"**
  ‚Üí Buscar archivo DT con ese ID y ejecutarlo

- **"Simula DT-[ID]"** o **"Modo dry-run"**
  ‚Üí Hacer toda la lectura y an√°lisis pero NO aplicar cambios
  ‚Üí Reportar qu√© se har√≠a

- **"Valida DT-[ID]"**
  ‚Üí Solo ejecutar validaciones (Paso 2)
  ‚Üí Reportar si es ejecutable

- **"Revierte DT-[ID]"**
  ‚Üí Si hay backup, revertir cambios
  ‚Üí Marcar DT como "Revertida"

---

## üîß EJECUCI√ìN MODULAR (NUEVO - v2.1)

### **DETECCI√ìN DE MODO MODULAR**

Cuando detectes un archivo DT con `ejecucion_modular.activado: true` en el YAML:

1. **Identificar subsistemas**
   - Leer campo `subsistemas` en YAML
   - Contar cu√°ntos subsistemas hay
   - Identificar dependencias entre ellos
   - Marcar cu√°les son cr√≠ticos vs opcionales

2. **Preguntar modo de ejecuci√≥n**
   ```
   üìã DT-[ID] detectada ([N] subsistemas)
   
   ¬øC√≥mo quieres ejecutar?
   
   1. ‚ö° Todo autom√°tico (ejecutar todos sin pausas)
   2. üîß Subsistema por subsistema (RECOMENDADO)
   3. üëÅÔ∏è  Solo simular (dry-run)
   4. ‚ùå Cancelar
   
   Tu elecci√≥n [1/2/3/4]:
   ```

---

### **MODO 1: EJECUCI√ìN AUTOM√ÅTICA**

Si usuario elige opci√≥n 1:

1. Mostrar resumen de todos los subsistemas
2. Pedir confirmaci√≥n √∫nica
3. Ejecutar todos secuencialmente
4. Si falla subsistema cr√≠tico ‚Üí Detener
5. Si falla subsistema opcional ‚Üí Continuar
6. Mostrar resumen final

---

### **MODO 2: EJECUCI√ìN SUBSISTEMA POR SUBSISTEMA (RECOMENDADO)**

Si usuario elige opci√≥n 2:

#### **Para cada subsistema en orden:**

**PASO 2.1: MOSTRAR INFORMACI√ìN**

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ SUBSISTEMA [N]/[TOTAL]: [NOMBRE]                          ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ                                                              ‚îÇ
‚îÇ ID: [id]                                                    ‚îÇ
‚îÇ Cr√≠tico: [S√ç/NO]                                           ‚îÇ
‚îÇ Dependencias: [lista o "ninguna"]                          ‚îÇ
‚îÇ                                                              ‚îÇ
‚îÇ ARCHIVOS A MODIFICAR ([N]):                                ‚îÇ
‚îÇ   ‚Ä¢ [archivo1]                                             ‚îÇ
‚îÇ   ‚Ä¢ [archivo2]                                             ‚îÇ
‚îÇ                                                              ‚îÇ
‚îÇ SCRIPTS A EJECUTAR ([N]):                                  ‚îÇ
‚îÇ   ‚Ä¢ [script1] - [descripci√≥n]                              ‚îÇ
‚îÇ                                                              ‚îÇ
‚îÇ VALIDACIONES ([N]):                                        ‚îÇ
‚îÇ   ‚úì [validaci√≥n1]                                          ‚îÇ
‚îÇ   ‚úì [validaci√≥n2]                                          ‚îÇ
‚îÇ                                                              ‚îÇ
‚îÇ RESULTADO ESPERADO:                                         ‚îÇ
‚îÇ   [descripci√≥n del resultado]                              ‚îÇ
‚îÇ                                                              ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ¬øEjecutar este subsistema? [S/n/i/q]                      ‚îÇ
‚îÇ   S = S√≠, ejecutar ahora                                   ‚îÇ
‚îÇ   n = No, saltar (solo si NO es cr√≠tico)                   ‚îÇ
‚îÇ   i = M√°s informaci√≥n                                       ‚îÇ
‚îÇ   q = Cancelar todo                                        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

**PASO 2.2: PROCESAR RESPUESTA**

- **Si "S" o "s"**: Continuar con ejecuci√≥n
- **Si "n" o "N"**: 
  - Si subsistema es cr√≠tico ‚Üí Advertir y volver a preguntar
  - Si subsistema es opcional ‚Üí Marcar como OMITIDO y continuar con siguiente
- **Si "i" o "I"**: Mostrar detalles adicionales (YAML completo del subsistema)
- **Si "q" o "Q"**: Cancelar toda la DT

**PASO 2.3: EJECUTAR SUBSISTEMA**

1. **Validaciones previas:**
   - Verificar archivos existen
   - Verificar dependencias cumplidas
   - Validar par√°metros

2. **Ejecuci√≥n:**
   - Ejecutar scripts en orden
   - Aplicar cambios a archivos
   - Mostrar progreso en tiempo real

3. **Validaciones posteriores:**
   - Verificar cambios aplicados correctamente
   - Validar resultado esperado
   - **EJECUTAR validaciones_post** (si est√°n definidas):
     - Si validaci√≥n tiene `script`: Ejecutar script con par√°metros
     - Si validaci√≥n tiene `obligatoria: true` y falla ‚Üí Detener y reportar error
     - Si validaci√≥n tiene `obligatoria: false` y falla ‚Üí Advertencia y continuar
     - Mostrar `mensaje_exito` o `mensaje_fallo` seg√∫n resultado

4. **Reportar resultado:**
   ```
   ‚úÖ SUBSISTEMA [N] COMPLETADO
   
   Tiempo: [X] segundos
   
   Archivos modificados:
     ‚úì [archivo1] - [N] cambios
     ‚úì [archivo2] - Regenerado
   
   Scripts ejecutados:
     ‚úì [script1] - Exitoso
   
   Validaciones:
     ‚úì [validaci√≥n1] - OK
     ‚úì [validaci√≥n2] - OK
   
   Validaciones Post-Ejecuci√≥n:
     ‚úì [script_validacion] - ‚úÖ EXITOSO
     ‚úì [verificaci√≥n_totales] - ‚úÖ OK
   
   Resultado: [descripci√≥n]
   ```

**PASO 2.4: SI SUBSISTEMA FALLA**

```
‚ùå SUBSISTEMA [N] FALL√ì

Error: [descripci√≥n del error]

Archivo: [archivo donde fall√≥]
L√≠nea: [si aplica]

¬øQu√© quieres hacer?

1. üîÑ Reintentar este subsistema
2. ‚è≠Ô∏è  Continuar sin este subsistema (solo si NO es cr√≠tico)
3. ‚Ü©Ô∏è  Revertir cambios de este subsistema
4. üõë Cancelar toda la DT
5. ‚ÑπÔ∏è  Ver detalles del error

Tu elecci√≥n [1/2/3/4/5]:
```

**Procesamiento:**
- **Opci√≥n 1:** Reintentar mismo subsistema
- **Opci√≥n 2:** Solo si `critico: false`, marcar FALLIDO y continuar
- **Opci√≥n 3:** Ejecutar rollback del subsistema
- **Opci√≥n 4:** Detener, marcar subsistemas completados en log
- **Opci√≥n 5:** Mostrar stack trace / detalles, luego volver a preguntar

**PASO 2.5: CONTINUAR CON SIGUIENTE SUBSISTEMA**

Despu√©s de cada subsistema exitoso, verificar:
- ¬øHay m√°s subsistemas pendientes?
- ¬øSus dependencias est√°n cumplidas?
- Mostrar progreso: "Completados: [N]/[TOTAL]"

---

### **MODO 3: SIMULACI√ìN (DRY-RUN)**

Si usuario elige opci√≥n 3:

1. Leer todos los subsistemas
2. **NO ejecutar** scripts ni modificar archivos
3. Reportar qu√© SE HAR√çA en cada subsistema
4. Mostrar posibles conflictos o problemas
5. Mostrar resumen final de cambios potenciales

Formato:
```
üîç SIMULACI√ìN DT-[ID] (Dry-run mode)

SUBSISTEMA 1/[N]: [NOMBRE]
  Archivos que se modificar√≠an:
    ‚Ä¢ [archivo1] ‚Üí [descripci√≥n de cambio]
    ‚Ä¢ [archivo2] ‚Üí Regenerado
  
  Scripts que se ejecutar√≠an:
    ‚Ä¢ [script1]
  
  Validaciones que se aplicar√≠an:
    ‚úì [validaci√≥n1]

[Repetir para cada subsistema]

‚úì Simulaci√≥n completa. No se aplicaron cambios.
```

---

### **PASO FINAL: REPORTE COMPLETO**

Al terminar (exitosamente o con errores), generar reporte:

```
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  DT-[ID] - REPORTE DE EJECUCI√ìN MODULAR
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

SUBSISTEMAS EJECUTADOS: [N_exitosos]/[TOTAL]

‚úÖ EXITOSOS ([N]):
  1. [nombre1] - [tiempo]s
  2. [nombre2] - [tiempo]s

‚ùå FALLIDOS ([N]):
  1. [nombre] - Error: [descripci√≥n breve]

‚ö†Ô∏è  OMITIDOS ([N]):
  1. [nombre] - (opcional, saltado por usuario)

ARCHIVOS MODIFICADOS TOTAL: [N]
  ‚Ä¢ [archivo1]
  ‚Ä¢ [archivo2]
  ...

SCRIPTS EJECUTADOS: [N]/[TOTAL]
  ‚úì [script1]
  ‚úì [script2]

TIEMPO TOTAL: [X] minutos [Y] segundos

ESTADO FINAL: 
  [‚úÖ EJECUCI√ìN COMPLETA / ‚ö†Ô∏è PARCIAL / ‚ùå FALLIDA]
```

**Actualizar log en archivo DT:**
- Completar secci√≥n "LOG DE EJECUCI√ìN"
- Detallar cada subsistema ejecutado
- Marcar checkboxes en secci√≥n "ESTADO DE EJECUCI√ìN"
- Agregar timestamp de cada subsistema

---

### **REGLAS ESPECIALES PARA EJECUCI√ìN MODULAR**

1. **Dependencias:**
   - Si subsistema B depende de A, verificar que A est√© OK antes de ejecutar B
   - Si A fall√≥ y B depende de A ‚Üí Marcar B como "NO EJECUTABLE"

2. **Subsistemas cr√≠ticos vs opcionales:**
   - `critico: true` ‚Üí No se puede saltar, fallo detiene DT
   - `critico: false` ‚Üí Puede saltarse o fallar sin detener DT

3. **Rollback:**
   - Si `rollback.posible: true` ‚Üí Ofrecer revertir cambios
   - Mantener backup mental del estado anterior
   - Ejecutar rollback en orden inverso (√∫ltimo ‚Üí primero)

4. **Timeout:**
   - Respetar `timeout_segundos` en scripts
   - Si excede timeout ‚Üí Ofrecer:
     - Esperar m√°s tiempo
     - Cancelar script
     - Continuar sin ese subsistema

5. **Validaciones:**
   - **Pre-ejecuci√≥n:** Ejecutar ANTES de modificar archivos
     - Si validaci√≥n falla ‚Üí No ejecutar subsistema
     - Validaciones opcionales pueden fallar sin detener
   - **Post-ejecuci√≥n:** Ejecutar DESPU√âS de modificar archivos
     - Campo: `validaciones_post` en YAML
     - Especialmente √∫til para WBS (validar cantidades √ó VU = Total)
     - Si `obligatoria: true` y falla ‚Üí Ofrecer rollback
     - Ejemplo: `scripts/validar_wbs_cantidades_totales.ps1`

6. **Progreso:**
   - Mostrar siempre: "Subsistema [N]/[TOTAL]"
   - Mostrar tiempo transcurrido
   - Actualizar en tiempo real si es posible

---

### **NUEVOS COMANDOS MODULARES**

- **"Ejecuta DT-[ID] modo modular"**
  ‚Üí Forzar modo subsistema por subsistema

- **"Ejecuta solo subsistema [nombre/numero] de DT-[ID]"**
  ‚Üí Ejecutar UN solo subsistema espec√≠fico

- **"Reintenta subsistema [nombre/numero]"**
  ‚Üí Reintentar subsistema que fall√≥

- **"Revierte subsistema [nombre/numero]"**
  ‚Üí Rollback de subsistema espec√≠fico

- **"Estado DT-[ID]"**
  ‚Üí Mostrar qu√© subsistemas est√°n OK/FALLO/PENDIENTE

---

## üìù FORMATO DE ARCHIVOS

### WBS Presupuestal
- Formato: Markdown con tablas
- Versionamiento: vX.Y en header
- √çtems con formato: `## [codigo] - [descripcion]`

### Documentos T√©cnicos
- Formatos: Markdown (.md)
- Secciones numeradas
- Referencias cruzadas con formato: `[doc] (Secci√≥n X.Y)`

### Matrices
- Tablas Markdown
- Headers fijos
- Nueva fila al final de tabla

---

## ‚öôÔ∏è CONFIGURACI√ìN DE COMPORTAMIENTO

### Siempre:
- ‚úÖ Pedir confirmaci√≥n antes de modificar archivos
- ‚úÖ Crear backup mental del contenido original
- ‚úÖ Reportar cada cambio aplicado
- ‚úÖ Actualizar log en DT
- ‚úÖ Ser expl√≠cito sobre qu√© se est√° haciendo

### Nunca:
- ‚ùå Modificar archivos sin confirmaci√≥n
- ‚ùå Omitir validaciones
- ‚ùå Ejecutar sin parsear YAML completo
- ‚ùå Aplicar cambios si validaci√≥n falla
- ‚ùå Modificar archivos fuera de los especificados en YAML

---

## üéØ PRIORIDADES

1. **SEGURIDAD**: No aplicar cambios sin confirmaci√≥n
2. **TRAZABILIDAD**: Documentar todo en log
3. **INTEGRIDAD**: Validar antes de ejecutar
4. **CLARIDAD**: Reportar qu√© se est√° haciendo
5. **REVERSIBILIDAD**: Mantener forma de revertir

---

## üìö EJEMPLOS

### Ejemplo 1: Usuario abre DT-FIBRA-042-2025-10-07.md

```
CURSOR:
üìã He detectado una Decisi√≥n T√©cnica: DT-FIBRA-042

√çtem WBS: 1.1.3 - Cajas de empalme
Tipo de cambio: Ajuste de cantidad
Archivos a actualizar: 3
√çtems dependientes: 2

¬øQuieres que ejecute esta DT? (S√≠/No)

USUARIO:
S√≠

CURSOR:
‚úÖ Validaciones completadas
- Todos los archivos existen
- Backup creado
- Formato validado

Iniciando ejecuci√≥n...

‚úì WBS_Presupuestal_v3.0.md ‚Üí v3.1 (2 cambios)
‚úì V.3_Comunicacion.md (1 cambio)
‚úì MATRIZ_DEPENDENCIAS.md (nueva fila)
‚úì Recalculado: 1.1.5, 1.1.10

‚úÖ DT-FIBRA-042 ejecutada exitosamente
Log completado en DT-FIBRA-042-2025-10-07.md
```

### Ejemplo 2: Usuario pide simulaci√≥n

```
USUARIO:
Simula DT-TETRA-015

CURSOR:
üîç SIMULACI√ìN DT-TETRA-015 (Dry-run mode)

Archivos que se modificar√≠an (2):
- WBS_Presupuestal_v4.0.md
  ‚Üí Cambio: cantidad "37" ‚Üí "42" en item 2.1.100
  ‚Üí Versi√≥n: v4.0 ‚Üí v4.1

- III/29_Sistema_TETRA.md
  ‚Üí Cambio: "37 estaciones" ‚Üí "42 estaciones" en Secci√≥n 3.1

√çtems que se recalcular√≠an (1):
- 2.1.101: Antenas (proporcional)

Matrices que se actualizar√≠an:
- MATRIZ_DEPENDENCIAS: Nueva fila

‚úì Simulaci√≥n completa. No se aplicaron cambios.
```

---

**√öltima actualizaci√≥n:** 7 de Octubre de 2025  
**Versi√≥n:** 1.0  
**Compatibilidad:** WBS Interactiva v3.0+  

